## Quarkus
#
quarkus.http.port=8092
# fast-jar (default) is causing issues with static field initialization,
# e.g. in CweImporter and CweResolver. Quarkus uses different ClassLoaders
# for the fast-jar deployment, but only one for the uber-jar.
# https://quarkus.io/guides/class-loading-reference
quarkus.package.type=uber-jar

## Kafka
#
%dev.kafka.bootstrap.servers=localhost:9092
%dev.quarkus.kafka-streams.bootstrap-servers=localhost:9092
quarkus.kafka-streams.application-id=dtrack-vulnerability-analyzer
quarkus.kafka-streams.application-server=localhost:8092
quarkus.kafka-streams.topics=\
  dtrack.vuln-analysis.component,\
  dtrack.vuln-analysis.component.cpe,\
  dtrack.vuln-analysis.component.purl,\
  dtrack.vuln-analysis.component.swid,\
  dtrack.vuln-analysis.vulnerability,\
  dtrack.vuln-analysis.result,\
  dtrack.vuln-analysis.info

quarkus.kafka.devservices.enabled=false
quarkus.log.category."org.apache.kafka".level=WARN
kafka.retry-attempts=2
kafka-streams.cache.max.bytes.buffering=10240
kafka-streams.commit.interval.ms=1000
kafka-streams.metadata.max.age.ms=500
kafka-streams.auto.offset.reset=earliest
kafka-streams.metrics.recording.level=DEBUG
kafka-streams.num.stream.threads=3

## Internal Scanner
#
scanner.internal.enabled=true

## OSS Index Scanner
#
scanner.ossindex.enabled=true
scanner.ossindex.api.base-url=https://ossindex.sonatype.org
scanner.ossindex.api.username=
scanner.ossindex.api.token=
scanner.ossindex.batch-interval=5S
scanner.ossindex.circuit-breaker.sliding-window-type=count_based
scanner.ossindex.circuit-breaker.sliding-window-size=100
scanner.ossindex.circuit-breaker.minimum-number-of-calls=100
scanner.ossindex.circuit-breaker.failure-rate-threshold=50
scanner.ossindex.circuit-breaker.slow-call-rate-threshold=100
scanner.ossindex.circuit-breaker.slow-call-duration-threshold=6S
scanner.ossindex.circuit-breaker.permitted-number-of-calls-in-half-open-state=10
scanner.ossindex.circuit-breaker.wait-duration-in-open-state=60S
scanner.ossindex.retry.initial-delay=5S
scanner.ossindex.retry.multiplier=2
scanner.ossindex.retry.max-attempts=6
scanner.ossindex.retry.max-duration=2M
quarkus.rest-client."org.acme.client.ossindex.OssIndexClient".url=${scanner.ossindex.api.base-url}
quarkus.rest-client."org.acme.client.ossindex.OssIndexClient".connect-timeout=3000
quarkus.rest-client."org.acme.client.ossindex.OssIndexClient".read-timeout=3000

## Snyk Scanner
#
scanner.snyk.enabled=false
scanner.snyk.api.base-url=https://api.snyk.io
scanner.snyk.api.org-id=
scanner.snyk.api.tokens=
scanner.snyk.api.version=2022-12-15
scanner.snyk.severity-source=NVD
scanner.snyk.circuit-breaker.sliding-window-type=count_based
scanner.snyk.circuit-breaker.sliding-window-size=100
scanner.snyk.circuit-breaker.minimum-number-of-calls=100
scanner.snyk.circuit-breaker.failure-rate-threshold=50
scanner.snyk.circuit-breaker.slow-call-rate-threshold=100
scanner.snyk.circuit-breaker.slow-call-duration-threshold=6S
scanner.snyk.circuit-breaker.permitted-number-of-calls-in-half-open-state=10
scanner.snyk.circuit-breaker.wait-duration-in-open-state=60S
scanner.snyk.retry.initial-delay=5S
scanner.snyk.retry.multiplier=2
scanner.snyk.retry.randomization-factor=0.3
scanner.snyk.retry.max-attempts=6
scanner.snyk.retry.max-duration=2M

## Cache
#
quarkus.cache.enabled=true
quarkus.cache.type=caffeine
quarkus.cache.caffeine."snyk".expire-after-write=2H
quarkus.cache.caffeine."snyk".metrics-enabled=true
quarkus.cache.caffeine."snyk".initial-capacity=5
quarkus.cache.caffeine."ossindex".expire-after-write=2H
quarkus.cache.caffeine."ossindex".metrics-enabled=true
quarkus.cache.caffeine."ossindex".initial-capacity=5
quarkus.cache.caffeine."internalCache".expire-after-write=2H
quarkus.cache.caffeine."internalCache".metrics-enabled=true
quarkus.cache.caffeine."internalCache".initial-capacity=5

quarkus.datasource.db-kind=postgresql

# Always use quotes for keywords, column- and table names.
# e.g. SELECT "FOO"."BAR" FROM "BAZ". This matches what the API server does,
# and is required for compatibility with its schema.
quarkus.hibernate-orm.database.globally-quoted-identifiers=true

# Hibernate should only validate that the existing schema matches our entity classes,
# but it should never generate a schema by itself.
quarkus.hibernate-orm.database.generation=validate

# Use external Postgres DB for dev mode (./mvnw quarkus:dev), but let Quarkus
# take care of test container creation in the test profile.
# See https://quarkus.io/guides/databases-dev-services
%dev.quarkus.datasource.username=dtrack
%dev.quarkus.datasource.password=dtrack
%dev.quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/dtrack
%prod.quarkus.datasource.username=dtrack
%prod.quarkus.datasource.password=dtrack
%prod.quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/dtrack

# Use Flyway only in test mode to populate the DB with the schema generated
# by the API server. In production or dev mode, this will be handled by the
# API server itself. See https://quarkus.io/guides/flyway
%test.quarkus.flyway.migrate-at-start=true
%test.quarkus.flyway.locations=migrations/postgres

%dev.quarkus.hibernate-orm.log.sql=true
quarkus.hibernate-orm.active=true

## Kubernetes
#
quarkus.kubernetes.name=vulnerability-analyzer
quarkus.kubernetes.part-of=dependency-track
quarkus.kubernetes.env.configmaps=vulnerability-analyzer-config
quarkus.kubernetes-client.devservices.enabled=false

## Helm
#
quarkus.helm.values."image-name".property=image
quarkus.helm.values."image-name".value=ghcr.io/mehab/vulnerability-analyzer:latest-native
quarkus.helm.values."replicas".paths=(kind == Deployment).spec.replicas
quarkus.helm.values."replicas".value-as-int=1
quarkus.helm.values."kafka.bootstrap-servers".paths=(kind == ConfigMap && metadata.name == vulnerability-analyzer-config).data.QUARKUS_KAFKA_STREAMS_BOOTSTRAP_SERVERS
quarkus.helm.values."kafka.num-stream-threads".paths=(kind == ConfigMap && metadata.name == vulnerability-analyzer-config).data.KAFKA_STREAMS_NUM_STREAM_THREADS
quarkus.helm.values."kafka.num-stream-threads".expression={{ .Values.app.kafka.numStreamThreads | quote }}
quarkus.helm.values."database.jdbc-url".paths=(kind == ConfigMap && metadata.name == vulnerability-analyzer-config).data.QUARKUS_DATASOURCE_JDBC_URL
quarkus.helm.values."database.username".paths=(kind == ConfigMap && metadata.name == vulnerability-analyzer-config).data.QUARKUS_DATASOURCE_USERNAME
quarkus.helm.values."database.password".paths=(kind == ConfigMap && metadata.name == vulnerability-analyzer-config).data.QUARKUS_DATASOURCE_PASSWORD
quarkus.helm.values."scanner.internal.enabled".paths=(kind == ConfigMap && metadata.name == vulnerability-analyzer-config).data.SCANNER_INTERNAL_ENABLED
quarkus.helm.values."scanner.internal.enabled".expression={{ .Values.app.scanner.internal.enabled | quote }}
quarkus.helm.values."scanner.ossindex.enabled".paths=(kind == ConfigMap && metadata.name == vulnerability-analyzer-config).data.SCANNER_OSSINDEX_ENABLED
quarkus.helm.values."scanner.ossindex.enabled".expression={{ .Values.app.scanner.ossindex.enabled | quote }}
quarkus.helm.values."scanner.ossindex.api.username".paths=(kind == ConfigMap && metadata.name == vulnerability-analyzer-config).data.SCANNER_OSSINDEX_API_USERNAME
quarkus.helm.values."scanner.ossindex.api.token".paths=(kind == ConfigMap && metadata.name == vulnerability-analyzer-config).data.SCANNER_OSSINDEX_API_TOKEN
quarkus.helm.values."scanner.snyk.enabled".paths=(kind == ConfigMap && metadata.name == vulnerability-analyzer-config).data.SCANNER_SNYK_ENABLED
quarkus.helm.values."scanner.snyk.enabled".expression={{ .Values.app.scanner.snyk.enabled | quote }}
quarkus.helm.values."scanner.snyk.api.org-id".paths=(kind == ConfigMap && metadata.name == vulnerability-analyzer-config).data.SCANNER_SNYK_API_ORG_ID
quarkus.helm.values."scanner.snyk.api.tokens".paths=(kind == ConfigMap && metadata.name == vulnerability-analyzer-config).data.SCANNER_SNYK_API_TOKENS

## Minikube
#
%minikube.quarkus.config.profile.parent=prod
%minikube.quarkus.helm.values."kafka.bootstrap-servers".value=host.minikube.internal:9093
%minikube.quarkus.helm.values."database.jdbc-url".value=jdbc:postgresql://host.minikube.internal:5432/dtrack
%minikube.quarkus.helm.values."database.username".value=dtrack
%minikube.quarkus.helm.values."database.password".value=dtrack