package org.acme;

import io.quarkus.kafka.client.serialization.ObjectMapperSerde;
import io.quarkus.test.common.QuarkusTestResource;
import io.quarkus.test.junit.QuarkusTest;
import io.quarkus.test.junit.mockito.InjectMock;
import io.quarkus.test.kafka.InjectKafkaCompanion;
import io.quarkus.test.kafka.KafkaCompanionResource;
import io.smallrye.reactive.messaging.kafka.companion.KafkaCompanion;
import org.acme.analyzer.OssIndexAnalyzer;
import org.acme.common.KafkaTopic;
import org.acme.model.AnalyzerIdentity;
import org.acme.model.Component;
import org.acme.model.VulnerabilityResult;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.common.serialization.Serdes;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.util.List;
import java.util.UUID;

import static org.mockito.Mockito.when;

@QuarkusTest
@QuarkusTestResource(KafkaCompanionResource.class)
class VulnerabilityAnalyzerTopologyIT {

    @InjectKafkaCompanion
    KafkaCompanion companion;

    @InjectMock
    OssIndexAnalyzer ossIndexAnalyzerMock;

    @Test
    void test() {
        final UUID uuid = UUID.randomUUID();
        final var component = new Component();
        component.setUuid(uuid);
        component.setCpe("cpe:/a:acme:application:9.1.1");
        component.setPurl("pkg:maven/com.fasterxml.jackson.core/jackson-databind@2.13.2");
        // component.setSwidTagId("PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiID8");

        final var result = new VulnerabilityResult();
        result.setIdentity(AnalyzerIdentity.OSSINDEX_ANALYZER);
        result.setComponent(component);

        when(ossIndexAnalyzerMock.isEnabled()).thenReturn(true);
        when(ossIndexAnalyzerMock.analyze(Mockito.any())).thenReturn(List.of(result));

        companion
                .produce(Serdes.UUID(), new ObjectMapperSerde<>(Component.class))
                .fromRecords(new ProducerRecord<>(KafkaTopic.VULN_ANALYSIS_COMPONENT.getName(), uuid, component));

        final List<ConsumerRecord<UUID, VulnerabilityResult>> results = companion
                .consume(Serdes.UUID(), new ObjectMapperSerde<>(VulnerabilityResult.class))
                .fromTopics(KafkaTopic.VULN_ANALYSIS_RESULT.getName(), 1)
                .awaitCompletion()
                .getRecords();
        Assertions.assertEquals(1, results.size());
        Assertions.assertEquals(uuid, results.get(0).key());
        Assertions.assertEquals(AnalyzerIdentity.OSSINDEX_ANALYZER, results.get(0).value().getIdentity());
    }

}
